name: Django CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Step 1: Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

        # Step 6: Run Django tests with coverage
      - name: Run Django tests with coverage
        env:
          DJANGO_SETTINGS_MODULE: weather_portal.settings
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          DATABASE_URL: postgres://test_user:test_pass@localhost:5432/test_db
        run: |
          pip install coverage psycopg2-binary
          python manage.py migrate --noinput
          coverage run --source='.' manage.py test
          coverage report

      # Step 7: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 8: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 9: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:${{ github.run_number }}
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:latest
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:latest,mode=max

      # Step 10: Optional Deployment to server via SSH
      # Uncomment and configure if deploying
      # - name: Deploy to server via SSH
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SERVER_HOST }}
      #     username: ${{ secrets.SERVER_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:latest
      #       docker stop weather-portal || true
      #       docker rm weather-portal || true
      #       docker run -d -p 8000:8000 --name weather-portal ${{ secrets.DOCKERHUB_USERNAME }}/weather-portal:latest

      # Step 11: Optional Slack notification on failure
      # - name: Notify Slack on failure
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
