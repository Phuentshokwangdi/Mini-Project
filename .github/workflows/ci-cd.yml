name: CI/CD Pipeline

on:
    push:
        branches: [main, feature/add-favorites-endpoint]
    pull_request:
        branches: [main]
    workflow_dispatch:

env:
    DEBUG: true

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:13
                env:
                    POSTGRES_PASSWORD: postgres
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.12"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Run migrations
              run: |
                  python manage.py migrate

            - name: Run tests
              run: |
                  python manage.py test

            - name: Collect static files
              run: |
                  python manage.py collectstatic --noinput

            - name: Health check
              run: |
                  python manage.py check --deploy
                  echo "✅ Django health check passed"

            - name: Test API endpoints
              run: |
                  # Start Django server in background
                  python manage.py runserver 0.0.0.0:8000 &
                  SERVER_PID=$!

                  # Wait for server to start
                  sleep 10

                  # Test health endpoint
                  echo "Testing health endpoint..."
                  curl -f http://localhost:8000/api/health/ || (echo "❌ Health check failed" && exit 1)
                  echo "✅ Health check passed"

                  # Test auth register endpoint (should return 400 for invalid data)
                  echo "Testing auth register endpoint..."
                  curl -X POST http://localhost:8000/api/auth/register/ \
                    -H "Content-Type: application/json" \
                    -d '{"username":"test","email":"test@example.com","password":"pass123","password_confirm":"pass123"}' \
                    || echo "Register endpoint responded (expected for unauthenticated)"

                  # Test weather endpoint (should return 401 for unauthenticated)
                  echo "Testing weather endpoint..."
                  curl -f http://localhost:8000/api/weather/?city=London \
                    || echo "Weather endpoint requires auth (expected)"

                  # Kill server
                  kill $SERVER_PID || true
                  echo "✅ API endpoint tests completed"
